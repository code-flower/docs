

GENERAL

- create a monitoring script using gulp
  - should open a new browser windows with multiple tabs:
    - pm2 monitor
    - google analytics
    - chrome extension stats
  - maybe also open iterm and start an ssh connection to various servers

- figure out how samples.json is going to be generated and served
  - generated by server, and then uploaded to s3?
- write a README for every module

CLIENT-WEB

- modify bundler to add watchify task and put handle error in the right place (like in portal-web)
- handle a param in the url (when linked from github via the extension)
- distinguish between the environment gulp is run in -- either LOCAL or REMOTE -- and the type of build -- PRODUCTION or DEVELOPMENT
  - the default 'gulp' command should maybe default to LOCAL / DEVELOPMENT
- maybe create a global var in the gulpfile for the SRC folder
- at the top of flower-languages, add name of repo as a link to the repo

SERVER

  2. gzip the responses
  4. deal with SIGTERM: http://joseoncode.com/2014/07/21/graceful-shutdown-in-node-dot-js/
    process.on('SIGTERM', function () {
      server.close(function () {
        process.exit(0);
      });
    });
  6. check this out: https://www.npmjs.com/package/guvnor
  9. set up buddy?
  10. set up vpm with client?
  13. maybe add webhook for github: https://www.npmjs.com/package/pm2-hook
  18. don't exit app until all connections are closed
  19. ping github at the beginning of the sequence and return error if not available
  20. admin.codeflower.la
  24. log rotation

BIG TASKS
  - pm2 webhook
  - load balancer
  - graceful reload
  - start server when new droplet is created from the image
  - periodic cert updates

CHROME

- figure out how to go fullscreen
  - may need to make the request from inside the angular app
  - but in order to do that, need to deploy angular app to a live integration server
    - link angular app to existing server on digital ocean (or start a new server)
    - before that, need to implement s3 uploading for the frontend
- need to change the url in the location bar when user clicks on Codeflower
- add "persisent": false to manifest.json

EMAILER

- separate the email function from the server and put it in a lambda function
- use the SDK for programmatic deployment

LOAD BALANCER

- figure out pw2
- do multiple servers/clusters
- add elasticity
- add awesome monitoring

LOAD TESTER

- bring in the load testing code I wrote for roofshoot

