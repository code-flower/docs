
------------ GENERAL -----------
- figure out how samples.json is going to be generated and served
  - generated by server, and then uploaded to s3?
- write a README for every module
- make npm module for PM2 wrapper
  - the wrapper is used in both the admin and cloc-server repos, making it a good candidate for publication
    - should use Promise.promisifyAll or something similar

------------- ADMIN ------------
- create a monitoring script using gulp
  - should open a new browser windows with multiple tabs:
    - pm2 monitor
    - google analytics
    - chrome extension stats
  - maybe also open iterm and start an ssh connection to various servers
- server should have an endpoint for getting logs from all servers
  - could use rsync or scp, or create a /logs endpoint in the servers
- an endpoint for checking the health of all servers
- server should run a cron job rotating the cert on the DO load balancer
- need to periodically check https://api.github.com/meta to get IPs of webhooks and whitelist them on the webhook port
  - ideally, there would be a webhook server inside of admin that sends a message to all of the cloc-servers when they need to pull and restart (rather than having direct contact with github on the individual cloc-servers)
- maybe the connection monitor code lives on the admin-server, and is rsynced to the cloc-servers when the monitor command is run. That code wouldn't have to be inside the cloc-server directory.

----------- CLIENT-WEB ----------
- modify bundler to add watchify task and put handle error in the right place (like in portal-web)
- handle a param in the url (when linked from github via the extension)
- maybe create a global var in the gulpfile for the SRC folder
- at the top of flower-languages, add name of repo as a link to the repo

------------- SERVER ------------
- log rotation

------------- CHROME ------------
- figure out how to go fullscreen
  - may need to make the request from inside the angular app
  - but in order to do that, need to deploy angular app to a live integration server
    - link angular app to existing server on digital ocean (or start a new server)
    - before that, need to implement s3 uploading for the frontend
- need to change the url in the location bar when user clicks on Codeflower
- add "persisent": false to manifest.json


