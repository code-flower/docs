

GENERAL

- figure out how samples.json is going to be generated and served
  - generated by server, and then uploaded to s3?
- write a README for every module

CLIENT-WEB

- modify bundler to add watchify task and put handle error in the right place (like in portal-web)
- handle a param in the url (when linked from github via the extension)
- distinguish between the environment gulp is run in -- either LOCAL or REMOTE -- and the type of build -- PRODUCTION or DEVELOPMENT
  - the default 'gulp' command should maybe default to LOCAL / DEVELOPMENT
- maybe create a global var in the gulpfile for the SRC folder
- at the top of flower-languages, add name of repo as a link to the repo

SERVER

- handle case where the same repo is cloned twice simultaneously
  - need to rejigger to repoToFolder/folderToRepo functions (maybe add a hash or the processId)
- maybe implement this: https://stackoverflow.com/questions/23914896/check-that-git-repository-exists (DONE)
- clone specific branches: https://stackoverflow.com/questions/1778088/how-to-clone-a-single-branch-in-git
- deploy server via Docker

- goals for new-api branch
  1. handle simultaneous clones of the same repo DONE
    - need to avoid name clashes -- maybe append the processId to the name of the repo folder
  2. use the native Promise in node instead of q
  3. make a cleaner api by using {type: [type], data: {...data}} consistently across endpoints
  4. serve the repo json over websockets to make testing easier
  5. check whether the repo exists first and provide and appropriate error message if it doesn't DONE
  6. accept a branch param
  7. call mkpath as necessary during server initialization (e.g. for repos folder)
  8. make path generation, file generation, and file deletion asynchronous

CHROME

- figure out how to go fullscreen
  - may need to make the request from inside the angular app
  - but in order to do that, need to deploy angular app to a live integration server
    - link angular app to existing server on digital ocean (or start a new server)
    - before that, need to implement s3 uploading for the frontend
- need to change the url in the location bar when user clicks on Codeflower
- add "persisent": false to manifest.json

EMAILER

- separate the email function from the server and put it in a lambda function
- use the SDK for programmatic deployment

LOAD BALANCER

- figure out pw2
- do multiple servers/clusters
- add elasticity
- add awesome monitoring

LOAD TESTER

- bring in the load testing code I wrote for roofshoot

